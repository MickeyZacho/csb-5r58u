{"version":3,"sources":["Layers.js","voronoi.js","App.js","index.js"],"names":["Layers","props","data","ScatterplotLayer","id","opacity","stroked","filled","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getRadius","d","Math","sqrt","exits","getFillColor","getLineColor","getPosition","position","voronoi","viewport","map","width","height","point","project","polygons","extent","vor","pathGroupEl","useRef","update","React","current","selected","select","selectAll","enter","append","attr","merge","length","concat","join","useEffect","react_default","a","createElement","viewBox","ref","App","_useState","useState","_useState2","Object","slicedToArray","setData","_ref","asyncToGenerator","regenerator_default","mark","_callee","result","points","wrap","_context","prev","next","csv","sent","lng","lat","stop","apply","this","arguments","fetchData","_useState3","WebMercatorViewport","window","innerWidth","innerHeight","longitude","latitude","zoom","maxZoom","pitch","bearing","_useState4","setViewport","handleResize","v","objectSpread2","addEventListener","removeEventListener","esm","assign","mapStyle","mapboxApiAccessToken","process","preventStyleDiffing","onViewportChange","deckgl","layers","renderLayers","initialViewState","controller","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85e2369b.chunk.js","sourcesContent":["import { ScatterplotLayer } from \"deck.gl\";\n\nexport default props => {\n  const { data } = props;\n\n  const layes = [\n    new ScatterplotLayer({\n      id: \"scatter-layer\",\n      data,\n      opacity: 0.5,\n      stroked: true,\n      filled: true,\n      radiusMinPixels: 10,\n      radiusMaxPixels: 1000,\n      lineWidthMinPixels: 1,\n      getRadius: d => Math.sqrt(d.exits),\n      getFillColor: d => [255, 0, 0],\n      getLineColor: d => [255, 0, 0],\n      getPosition: d => d.position\n    })\n  ];\n\n  return layes;\n};\n","import React, { useRef, useEffect } from \"react\";\nimport { voronoi } from \"d3-voronoi\";\nimport { select } from \"d3-selection\";\n\nexport default props => {\n  const { viewport, data } = props;\n\n  if (!data.map) return null;\n  const width = viewport.width;\n  const height = viewport.height;\n  const point = data.map(d => viewport.project(d.position));\n  const vor = voronoi().extent([[0, 0], [width, height]]);\n  const polygons = vor(point).polygons();\n\n  const pathGroupEl = useRef(null);\n  const update = React.useRef();\n\n  update.current = () => {\n    const selected = select(pathGroupEl.current)\n      .selectAll(\".cell\")\n      .data(polygons);\n\n    const enter = selected\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"cell\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\");\n\n    selected.merge(enter).attr(\"d\", d => {\n      if (!d || d.length < 1) return null;\n      return `M${d.join(\"L\")}Z`;\n    });\n  };\n\n  useEffect(() => {\n    update.current();\n  }, [polygons]);\n\n  return (\n    <svg viewBox={`0 0 ${viewport.width} ${viewport.height}`}>\n      <g ref={pathGroupEl} />\n    </svg>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport DeckGL, { WebMercatorViewport } from \"deck.gl\";\nimport MapGL from \"react-map-gl\";\nimport renderLayers from \"./Layers.js\";\nimport Voronoi from \"./voronoi.js\";\n\nimport { csv } from \"d3-fetch\";\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOXTOKEN;\nconst DATA_URL = \"./heatmap-data.csv\";\n\nexport default () => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await csv(DATA_URL);\n      const points = result.map(function(d) {\n        return { position: [+d.lng, +d.lat] };\n      });\n      setData(points);\n    };\n\n    fetchData();\n  }, []);\n\n  const [viewport, setViewport] = useState(\n    new WebMercatorViewport({\n      width: window.innerWidth,\n      height: window.innerHeight,\n      longitude: -3.2943888952729092,\n      latitude: 53.63605986631115,\n      zoom: 6,\n      maxZoom: 16,\n      pitch: 65,\n      bearing: 0\n    })\n  );\n\n  //resize\n  useEffect(() => {\n    const handleResize = () => {\n      setViewport(v => {\n        return {\n          ...v,\n          width: window.innerWidth,\n          height: window.innerHeight\n        };\n      });\n    };\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <div>\n      <MapGL\n        {...viewport}\n        mapStyle={\"mapbox://styles/mapbox/light-v9\"}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n        preventStyleDiffing={false}\n        onViewportChange={v => setViewport(new WebMercatorViewport(v))}\n      >\n        <DeckGL\n          layers={renderLayers({\n            data: data\n          })}\n          initialViewState={viewport}\n          controller={true}\n        />\n        <Voronoi viewport={viewport} data={data} />\n      </MapGL>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}